-- ========================================================================
-- RCM AI Demo - Semantic Views Setup (Part 2 of 4)
-- Healthcare Revenue Cycle Management Semantic Views for Cortex Analyst
-- ========================================================================

USE ROLE SF_INTELLIGENCE_DEMO;
USE DATABASE RCM_AI_DEMO;
USE SCHEMA RCM_SCHEMA;

-- ========================================================================
-- CLAIMS PROCESSING SEMANTIC VIEW
-- ========================================================================

CREATE OR REPLACE SEMANTIC VIEW RCM_AI_DEMO.RCM_SCHEMA.CLAIMS_PROCESSING_VIEW
tables (
    CLAIMS as CLAIMS_FACT primary key (CLAIM_ID),
    PROVIDERS as HEALTHCARE_PROVIDERS_DIM primary key (PROVIDER_KEY),
    PAYERS as PAYERS_DIM primary key (PAYER_KEY),
    PROCEDURES as PROCEDURES_DIM primary key (PROCEDURE_KEY),
    SPECIALTIES as PROVIDER_SPECIALTIES_DIM primary key (SPECIALTY_KEY),
    REGIONS as GEOGRAPHIC_REGIONS_DIM primary key (REGION_KEY),
    EMPLOYEES as RCM_EMPLOYEES_DIM primary key (EMPLOYEE_KEY)
)
relationships (
    CLAIMS_TO_PROVIDERS as CLAIMS(PROVIDER_KEY) references PROVIDERS(PROVIDER_KEY),
    CLAIMS_TO_PAYERS as CLAIMS(PAYER_KEY) references PAYERS(PAYER_KEY),
    CLAIMS_TO_PROCEDURES as CLAIMS(PROCEDURE_KEY) references PROCEDURES(PROCEDURE_KEY),
    CLAIMS_TO_SPECIALTIES as CLAIMS(SPECIALTY_KEY) references SPECIALTIES(SPECIALTY_KEY),
    CLAIMS_TO_REGIONS as CLAIMS(REGION_KEY) references REGIONS(REGION_KEY),
    CLAIMS_TO_EMPLOYEES as CLAIMS(EMPLOYEE_KEY) references EMPLOYEES(EMPLOYEE_KEY)
)
facts (
    CLAIMS.CHARGE_AMOUNT as CHARGE_AMOUNT,
    CLAIMS.ALLOWED_AMOUNT as ALLOWED_AMOUNT,
    CLAIMS.PAID_AMOUNT as PAID_AMOUNT,
    CLAIMS.PATIENT_RESPONSIBILITY as PATIENT_RESPONSIBILITY,
    CLAIMS.DAYS_TO_PAYMENT as DAYS_TO_PAYMENT
)
dimensions (
    CLAIMS.SUBMISSION_DATE as SUBMISSION_DATE,
    CLAIMS.SERVICE_DATE as SERVICE_DATE,
    CLAIMS.CLAIM_STATUS as CLAIM_STATUS,
    CLAIMS.PAYMENT_STATUS as PAYMENT_STATUS,
    CLAIMS.CLEAN_CLAIM_FLAG as CLEAN_CLAIM_FLAG,
    CLAIMS.DENIAL_FLAG as DENIAL_FLAG,
    CLAIMS.APPEAL_FLAG as APPEAL_FLAG,
    PROVIDERS.PROVIDER_NAME as PROVIDER_NAME,
    PROVIDERS.PROVIDER_TYPE as PROVIDER_TYPE,
    PROVIDERS.SPECIALTY as SPECIALTY,
    PROVIDERS.ANNUAL_REVENUE as ANNUAL_REVENUE,
    PAYERS.PAYER_NAME as PAYER_NAME,
    PAYERS.PAYER_TYPE as PAYER_TYPE,
    PAYERS.MARKET_SHARE as MARKET_SHARE,
    PAYERS.AVG_DAYS_TO_PAY as AVG_DAYS_TO_PAY,
    PROCEDURES.CPT_CODE as CPT_CODE,
    PROCEDURES.PROCEDURE_NAME as PROCEDURE_NAME,
    PROCEDURES.CATEGORY as CATEGORY,
    PROCEDURES.RELATIVE_VALUE_UNITS as RELATIVE_VALUE_UNITS,
    SPECIALTIES.SPECIALTY_NAME as SPECIALTY_NAME,
    SPECIALTIES.SPECIALTY_TYPE as SPECIALTY_TYPE,
    REGIONS.REGION_NAME as REGION_NAME,
    REGIONS.STATE as STATE,
    EMPLOYEES.DEPARTMENT as DEPARTMENT,
    EMPLOYEES.ROLE as ROLE
)
metrics (
    CLAIMS.TOTAL_CLAIMS as COUNT(*)
        WITH SYNONYMS = ('total claims', 'claim count', 'number of claims'),
    CLAIMS.CLEAN_CLAIMS as COUNT(CASE WHEN CLEAN_CLAIM_FLAG THEN 1 END)
        WITH SYNONYMS = ('clean claims', 'first pass claims'),
    CLAIMS.DENIED_CLAIMS as COUNT(CASE WHEN DENIAL_FLAG THEN 1 END)
        WITH SYNONYMS = ('denied claims', 'claim denials'),
    CLAIMS.APPEALED_CLAIMS as COUNT(CASE WHEN APPEAL_FLAG THEN 1 END)
        WITH SYNONYMS = ('appealed claims', 'claims under appeal'),
    CLAIMS.TOTAL_CHARGES as SUM(CHARGE_AMOUNT)
        WITH SYNONYMS = ('total charges', 'gross charges', 'billed amount'),
    CLAIMS.TOTAL_ALLOWED as SUM(ALLOWED_AMOUNT)
        WITH SYNONYMS = ('total allowed', 'allowed amounts'),
    CLAIMS.TOTAL_PAID as SUM(PAID_AMOUNT)
        WITH SYNONYMS = ('total paid', 'payments received', 'collections'),
    CLAIMS.TOTAL_PATIENT_RESPONSIBILITY as SUM(PATIENT_RESPONSIBILITY)
        WITH SYNONYMS = ('patient responsibility', 'patient portion', 'copays and deductibles'),
    CLAIMS.CLEAN_CLAIM_RATE as (COUNT(CASE WHEN CLEAN_CLAIM_FLAG THEN 1 END) / COUNT(*) * 100)
        WITH SYNONYMS = ('clean claim rate', 'first pass rate', 'acceptance rate'),
    CLAIMS.DENIAL_RATE as (COUNT(CASE WHEN DENIAL_FLAG THEN 1 END) / COUNT(*) * 100)
        WITH SYNONYMS = ('denial rate', 'rejection rate'),
    CLAIMS.NET_COLLECTION_RATE as (SUM(PAID_AMOUNT) / SUM(CHARGE_AMOUNT) * 100)
        WITH SYNONYMS = ('net collection rate', 'collection rate', 'reimbursement rate'),
    CLAIMS.AVERAGE_DAYS_TO_PAYMENT as AVG(DAYS_TO_PAYMENT)
        WITH SYNONYMS = ('average days to payment', 'payment cycle time', 'days in AR'),
    CLAIMS.AVERAGE_CHARGE as AVG(CHARGE_AMOUNT)
        WITH SYNONYMS = ('average charge', 'average billed amount'),
    CLAIMS.AVERAGE_PAID as AVG(PAID_AMOUNT)
        WITH SYNONYMS = ('average payment', 'average reimbursement')
);

-- ========================================================================
-- DENIALS MANAGEMENT SEMANTIC VIEW
-- ========================================================================

CREATE OR REPLACE SEMANTIC VIEW RCM_AI_DEMO.RCM_SCHEMA.DENIALS_MANAGEMENT_VIEW
tables (
    DENIALS as DENIALS_FACT primary key (DENIAL_ID),
    CLAIMS as CLAIMS_FACT primary key (CLAIM_ID),
    PROVIDERS as HEALTHCARE_PROVIDERS_DIM primary key (PROVIDER_KEY),
    PAYERS as PAYERS_DIM primary key (PAYER_KEY),
    DENIAL_REASONS as DENIAL_REASONS_DIM primary key (DENIAL_REASON_KEY),
    APPEALS as APPEALS_DIM primary key (APPEAL_KEY),
    EMPLOYEES as RCM_EMPLOYEES_DIM primary key (EMPLOYEE_KEY)
)
relationships (
    DENIALS_TO_CLAIMS as DENIALS(CLAIM_ID) references CLAIMS(CLAIM_ID),
    DENIALS_TO_PROVIDERS as DENIALS(PROVIDER_KEY) references PROVIDERS(PROVIDER_KEY),
    DENIALS_TO_PAYERS as DENIALS(PAYER_KEY) references PAYERS(PAYER_KEY),
    DENIALS_TO_REASONS as DENIALS(DENIAL_REASON_KEY) references DENIAL_REASONS(DENIAL_REASON_KEY),
    DENIALS_TO_APPEALS as DENIALS(APPEAL_KEY) references APPEALS(APPEAL_KEY),
    DENIALS_TO_EMPLOYEES as DENIALS(EMPLOYEE_KEY) references EMPLOYEES(EMPLOYEE_KEY)
)
facts (
    DENIALS.DENIED_AMOUNT as DENIED_AMOUNT,
    DENIALS.RECOVERED_AMOUNT as RECOVERED_AMOUNT,
    DENIALS.DAYS_TO_APPEAL as DAYS_TO_APPEAL,
    DENIALS.DAYS_TO_RESOLUTION as DAYS_TO_RESOLUTION
)
dimensions (
    DENIALS.DENIAL_DATE as DENIAL_DATE,
    DENIALS.DENIAL_STATUS as DENIAL_STATUS,
    DENIALS.APPEAL_OUTCOME as APPEAL_OUTCOME,
    PROVIDERS.PROVIDER_NAME as PROVIDER_NAME,
    PROVIDERS.PROVIDER_TYPE as PROVIDER_TYPE,
    PROVIDERS.SPECIALTY as SPECIALTY,
    PAYERS.PAYER_NAME as PAYER_NAME,
    PAYERS.PAYER_TYPE as PAYER_TYPE,
    DENIAL_REASONS.DENIAL_CODE as DENIAL_CODE,
    DENIAL_REASONS.DENIAL_DESCRIPTION as DENIAL_DESCRIPTION,
    DENIAL_REASONS.CATEGORY as CATEGORY,
    DENIAL_REASONS.APPEALABLE as APPEALABLE,
    DENIAL_REASONS.SUCCESS_RATE as SUCCESS_RATE,
    APPEALS.APPEAL_TYPE as APPEAL_TYPE,
    APPEALS.FILING_DEADLINE_DAYS as FILING_DEADLINE_DAYS,
    EMPLOYEES.DEPARTMENT as DEPARTMENT,
    EMPLOYEES.ROLE as ROLE
)
metrics (
    DENIALS.TOTAL_DENIALS as COUNT(*)
        WITH SYNONYMS = ('total denials', 'denial count', 'number of denials'),
    DENIALS.APPEALED_DENIALS as COUNT(CASE WHEN DAYS_TO_APPEAL IS NOT NULL THEN 1 END)
        WITH SYNONYMS = ('appealed denials', 'denials under appeal'),
    DENIALS.RESOLVED_DENIALS as COUNT(CASE WHEN DAYS_TO_RESOLUTION IS NOT NULL THEN 1 END)
        WITH SYNONYMS = ('resolved denials', 'closed denials'),
    DENIALS.TOTAL_DENIED_AMOUNT as SUM(DENIED_AMOUNT)
        WITH SYNONYMS = ('total denied amount', 'denied dollars', 'lost revenue'),
    DENIALS.TOTAL_RECOVERED_AMOUNT as SUM(RECOVERED_AMOUNT)
        WITH SYNONYMS = ('total recovered', 'appeal recoveries', 'recovered revenue'),
    DENIALS.AVERAGE_DENIED_AMOUNT as AVG(DENIED_AMOUNT)
        WITH SYNONYMS = ('average denial amount', 'mean denial value'),
    DENIALS.APPEAL_RATE as (COUNT(CASE WHEN DAYS_TO_APPEAL IS NOT NULL THEN 1 END) / COUNT(*) * 100)
        WITH SYNONYMS = ('appeal rate', 'percentage appealed'),
    DENIALS.RECOVERY_RATE as (SUM(RECOVERED_AMOUNT) / SUM(DENIED_AMOUNT) * 100)
        WITH SYNONYMS = ('recovery rate', 'appeal success percentage'),
    DENIALS.AVERAGE_DAYS_TO_APPEAL as AVG(DAYS_TO_APPEAL)
        WITH SYNONYMS = ('average days to appeal', 'appeal timing'),
    DENIALS.AVERAGE_DAYS_TO_RESOLUTION as AVG(DAYS_TO_RESOLUTION)
        WITH SYNONYMS = ('average resolution time', 'time to resolve'),
    DENIALS.SUCCESSFUL_APPEALS as COUNT(CASE WHEN APPEAL_OUTCOME IN ('Approved', 'Partial') THEN 1 END)
        WITH SYNONYMS = ('successful appeals', 'won appeals'),
    DENIALS.APPEAL_SUCCESS_RATE as (COUNT(CASE WHEN APPEAL_OUTCOME IN ('Approved', 'Partial') THEN 1 END) / COUNT(CASE WHEN DAYS_TO_APPEAL IS NOT NULL THEN 1 END) * 100)
        WITH SYNONYMS = ('appeal success rate', 'win rate for appeals')
);

-- Show semantic views creation completion
SHOW SEMANTIC VIEWS;

SELECT 'RCM Semantic Views Setup Complete - Part 2 of 4' as status;
